# Gov-Hub PoC Finalization Script
# Executa todos os passos necess√°rios para finalizar a PoC

param(
    [switch]$SkipGit,
    [switch]$DryRun,
    [string]$CommitMessage = "feat(poc): conclude proof of concept implementation"
)

Write-Host "üéØ Gov-Hub PoC - Script de Finaliza√ß√£o" -ForegroundColor Green
Write-Host "=======================================" -ForegroundColor Green

# Fun√ß√£o para logging
function Write-Step {
    param([string]$Message)
    Write-Host "‚û§ $Message" -ForegroundColor Cyan
}

function Write-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "‚ùå $Message" -ForegroundColor Red
}

# 1. Verifica√ß√µes Iniciais
Write-Step "Verificando ambiente e depend√™ncias..."

if (-not (Test-Path "pyproject.toml")) {
    Write-Error "Arquivo pyproject.toml n√£o encontrado. Execute este script na raiz do projeto."
    exit 1
}

if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
    Write-Error "Git n√£o est√° instalado ou n√£o est√° no PATH."
    exit 1
}

Write-Success "Ambiente verificado com sucesso"

# 2. Valida√ß√£o Final do Projeto
Write-Step "Executando valida√ß√£o final do projeto..."

if (Test-Path "validate_final.ps1") {
    try {
        & ".\validate_final.ps1"
        Write-Success "Valida√ß√£o final executada com sucesso"
    }
    catch {
        Write-Error "Falha na valida√ß√£o final: $($_.Exception.Message)"
        if (-not $DryRun) {
            $continue = Read-Host "Deseja continuar mesmo com falhas na valida√ß√£o? (y/N)"
            if ($continue -ne "y" -and $continue -ne "Y") {
                exit 1
            }
        }
    }
} else {
    Write-Warning "Script validate_final.ps1 n√£o encontrado"
}

# 3. Limpeza de Arquivos Tempor√°rios
Write-Step "Limpando arquivos tempor√°rios..."

$tempPatterns = @(
    "__pycache__",
    "*.pyc",
    "*.pyo",
    "*.tmp",
    "*.temp",
    ".pytest_cache",
    "*.log"
)

foreach ($pattern in $tempPatterns) {
    Get-ChildItem -Path . -Recurse -Name $pattern -Force | ForEach-Object {
        if ($DryRun) {
            Write-Host "    [DRY RUN] Removeria: $_"
        } else {
            Remove-Item $_ -Recurse -Force -ErrorAction SilentlyContinue
        }
    }
}

Write-Success "Limpeza conclu√≠da"

# 4. Verifica√ß√£o do .gitignore
Write-Step "Verificando configura√ß√£o do .gitignore..."

$gitignoreContent = Get-Content ".gitignore" -ErrorAction SilentlyContinue
$requiredPatterns = @("data/processed/", "data/raw/*.csv", "!data/raw/*_sample.csv", "__pycache__/")

$missingPatterns = @()
foreach ($pattern in $requiredPatterns) {
    if ($gitignoreContent -notcontains $pattern) {
        $missingPatterns += $pattern
    }
}

if ($missingPatterns.Count -gt 0) {
    Write-Warning "Padr√µes faltando no .gitignore: $($missingPatterns -join ', ')"
} else {
    Write-Success ".gitignore configurado corretamente"
}

# 5. Processamento Git (se habilitado)
if (-not $SkipGit) {
    Write-Step "Processando versionamento Git..."
    
    # Verificar status do reposit√≥rio
    $gitStatus = git status --porcelain
    if ($gitStatus) {
        Write-Step "Arquivos modificados detectados. Adicionando ao staging..."
        
        if ($DryRun) {
            Write-Host "    [DRY RUN] git add ."
            Write-Host "    [DRY RUN] git commit -m '$CommitMessage'"
        } else {
            git add .
            
            # Commit com mensagem padr√£o ou personalizada
            $fullCommitMessage = @"
$CommitMessage

- Add comprehensive data acquisition and integration pipeline
- Implement automated validation and testing scripts  
- Add complete documentation and user guides
- Configure project structure and dependencies
- Add sample data and processing examples

BREAKING CHANGE: Complete PoC implementation ready for production evaluation

Closes #POC-001
"@
            
            git commit -m $fullCommitMessage
            Write-Success "Commit criado com sucesso"
            
            # Verificar se estamos em uma branch remota
            $currentBranch = git branch --show-current
            $remoteBranch = git ls-remote --heads origin $currentBranch
            
            if ($remoteBranch) {
                Write-Step "Fazendo push para origin/$currentBranch..."
                git push origin $currentBranch
                Write-Success "Push realizado com sucesso"
            } else {
                Write-Warning "Branch remota n√£o encontrada. Execute 'git push origin $currentBranch' manualmente."
            }
        }
    } else {
        Write-Success "Reposit√≥rio j√° est√° atualizado"
    }
} else {
    Write-Warning "Processamento Git foi pulado (par√¢metro -SkipGit)"
}

# 6. Gera√ß√£o de Relat√≥rio Final
Write-Step "Gerando relat√≥rio de finaliza√ß√£o..."

$reportPath = "finalization-report-$(Get-Date -Format 'yyyy-MM-dd-HHmm').txt"

$report = @"
Gov-Hub PoC - Relat√≥rio de Finaliza√ß√£o
=====================================
Data: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
Usu√°rio: $env:USERNAME
M√°quina: $env:COMPUTERNAME

Status da Finaliza√ß√£o:
‚úÖ Valida√ß√£o do projeto executada
‚úÖ Arquivos tempor√°rios limpos
‚úÖ .gitignore verificado
$(if (-not $SkipGit) { "‚úÖ Versionamento Git processado" } else { "‚ö†Ô∏è  Versionamento Git pulado" })

Pr√≥ximos Passos:
1. Revisar Pull Request (pull-request-template.md)
2. Executar comandos Git (git-versioning-commands.md)
3. Apresentar relat√≥rio final (POC-COMPLETION-REPORT.md)

Arquivos Gerados:
- .gitignore (atualizado)
- git-versioning-commands.md
- pull-request-template.md  
- POC-COMPLETION-REPORT.md
- finalize-poc.ps1

Status: FINALIZA√á√ÉO CONCLU√çDA COM SUCESSO ‚úÖ
"@

if ($DryRun) {
    Write-Host "    [DRY RUN] Relat√≥rio seria salvo em: $reportPath"
    Write-Host $report
} else {
    $report | Out-File -FilePath $reportPath -Encoding utf8
    Write-Success "Relat√≥rio salvo em: $reportPath"
}

# 7. Mensagem Final
Write-Host ""
Write-Host "üéâ FINALIZA√á√ÉO DA POC CONCLU√çDA COM SUCESSO!" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Pr√≥ximos Passos:" -ForegroundColor Yellow
Write-Host "   1. Revisar o Pull Request template: pull-request-template.md"
Write-Host "   2. Executar comandos Git: git-versioning-commands.md"
Write-Host "   3. Apresentar o relat√≥rio: POC-COMPLETION-REPORT.md"
Write-Host ""
Write-Host "üìÅ Arquivos de Documenta√ß√£o Criados:" -ForegroundColor Cyan
Write-Host "   - git-versioning-commands.md"
Write-Host "   - pull-request-template.md"
Write-Host "   - POC-COMPLETION-REPORT.md"
Write-Host "   - finalize-poc.ps1"
Write-Host "   - $reportPath"
Write-Host ""
Write-Host "üéØ A PoC do Gov-Hub est√° oficialmente CONCLU√çDA!" -ForegroundColor Green
