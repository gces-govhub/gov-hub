#!/usr/bin/env python3
"""
Aquisi√ß√£o de Dados Reais do SIAFI - Gov-Hub PoC
Script para baixar dados reais do Portal da Transpar√™ncia do SIAFI.
"""

import requests
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta
import logging
import time
import json

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class RealSiafiAcquirer:
    """Classe para aquisi√ß√£o de dados reais do SIAFI via Portal da Transpar√™ncia."""
    
    def __init__(self):
        self.base_url = "https://api.portaldatransparencia.gov.br/api-de-dados"
        self.base_dir = Path("data/poc_siafi")
        self.raw_dir = self.base_dir / "dados_brutos"
        self.processed_dir = self.base_dir / "dados_processados"
        self.reports_dir = self.base_dir / "relatorios"
        
        # Criar diret√≥rios
        for dir_path in [self.raw_dir, self.processed_dir, self.reports_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
    
    def get_despesas_execucao(self, ano=2024, mes=12, pagina=1, limite=500):
        """
        Busca dados de despesas de execu√ß√£o do SIAFI.
        
        Args:
            ano: Ano dos dados (padr√£o: 2024)
            mes: M√™s dos dados (padr√£o: 12)
            pagina: P√°gina da consulta (padr√£o: 1)
            limite: Limite de registros por p√°gina (m√°ximo: 500)
        """
        url = f"{self.base_url}/despesas/execucao"
        
        params = {
            'mesAnoInicio': f"{mes:02d}/{ano}",
            'mesAnoFim': f"{mes:02d}/{ano}",
            'pagina': pagina,
            'tamanhoPagina': limite
        }
        
        headers = {
            'Accept': 'application/json',
            'User-Agent': 'Gov-Hub-PoC/1.0'
        }
        
        try:
            logger.info(f"üìä Buscando dados SIAFI - Ano: {ano}, M√™s: {mes}, P√°gina: {pagina}")
            response = requests.get(url, params=params, headers=headers, timeout=30)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"‚ùå Erro na API: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def collect_sample_data(self, ano=2024, mes=12, max_registros=1000):
        """
        Coleta uma amostra de dados reais do SIAFI.
        
        Args:
            ano: Ano dos dados
            mes: M√™s dos dados
            max_registros: M√°ximo de registros a coletar
        """
        logger.info(f"üèõÔ∏è Iniciando coleta de dados reais do SIAFI...")
        logger.info(f"üìÖ Per√≠odo: {mes:02d}/{ano}")
        
        all_data = []
        pagina = 1
        registros_coletados = 0
        
        while registros_coletados < max_registros:
            # Calcular limite para esta p√°gina
            limite = min(500, max_registros - registros_coletados)
            
            # Buscar dados
            data = self.get_despesas_execucao(ano, mes, pagina, limite)
            
            if not data or not data.get('data'):
                logger.warning(f"‚ö†Ô∏è Sem dados na p√°gina {pagina}")
                break
            
            page_data = data.get('data', [])
            all_data.extend(page_data)
            registros_coletados += len(page_data)
            
            logger.info(f"üìã P√°gina {pagina}: {len(page_data)} registros coletados (Total: {registros_coletados})")
            
            # Verificar se h√° mais p√°ginas
            if len(page_data) < limite:
                break
            
            pagina += 1
            time.sleep(1)  # Rate limiting
        
        if all_data:
            # Salvar dados brutos
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            raw_file = self.raw_dir / f"siafi_despesas_reais_{ano}_{mes:02d}_{timestamp}.json"
            
            with open(raw_file, 'w', encoding='utf-8') as f:
                json.dump(all_data, f, indent=2, ensure_ascii=False)
            
            logger.info(f"üíæ Dados brutos salvos: {raw_file.name}")
            
            # Converter para CSV
            csv_file = self.raw_dir / f"siafi_despesas_reais_{ano}_{mes:02d}_{timestamp}.csv"
            df = pd.DataFrame(all_data)
            df.to_csv(csv_file, index=False, encoding='utf-8')
            
            logger.info(f"üìä CSV criado: {csv_file.name}")
            logger.info(f"‚úÖ Total coletado: {len(all_data)} registros reais do SIAFI")
            
            # Gerar relat√≥rio
            self.generate_collection_report(csv_file, all_data)
            
            return csv_file
        else:
            logger.error("‚ùå Nenhum dado foi coletado")
            return None
    
    def generate_collection_report(self, csv_file, data):
        """Gera relat√≥rio da coleta de dados."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.reports_dir / f"relatorio_coleta_siafi_{timestamp}.txt"
        
        # An√°lise b√°sica dos dados
        df = pd.DataFrame(data)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write("RELAT√ìRIO DE COLETA - DADOS REAIS DO SIAFI\n")
            f.write("=" * 80 + "\n\n")
            
            f.write(f"Data da Coleta: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"Fonte: Portal da Transpar√™ncia - API SIAFI\n")
            f.write(f"Arquivo: {csv_file.name}\n\n")
            
            f.write("ESTAT√çSTICAS DA COLETA:\n")
            f.write("-" * 40 + "\n")
            f.write(f"üìä Total de registros: {len(data):,}\n")
            f.write(f"üìÅ Tamanho do arquivo: {csv_file.stat().st_size / 1024:.2f} KB\n")
            f.write(f"üóÉÔ∏è Colunas dispon√≠veis: {len(df.columns)}\n\n")
            
            f.write("ESTRUTURA DOS DADOS:\n")
            f.write("-" * 40 + "\n")
            for i, col in enumerate(df.columns, 1):
                f.write(f"{i:2d}. {col}\n")
            
            if not df.empty:
                f.write("\nAMOSTRA DOS DADOS (primeiros 3 registros):\n")
                f.write("-" * 40 + "\n")
                for i, (_, row) in enumerate(df.head(3).iterrows()):
                    f.write(f"\nRegistro {i+1}:\n")
                    for col, val in row.items():
                        f.write(f"  {col}: {val}\n")
            
            f.write(f"\n‚úÖ COLETA CONCLU√çDA COM SUCESSO!\n")
            f.write(f"üéØ Dados reais do SIAFI prontos para an√°lise.\n")
        
        logger.info(f"üìã Relat√≥rio de coleta salvo: {report_file.name}")

def main():
    """Fun√ß√£o principal para coleta de dados."""
    acquirer = RealSiafiAcquirer()
    
    try:
        # Coletar dados do m√™s anterior
        hoje = datetime.now()
        mes_anterior = hoje.replace(day=1) - timedelta(days=1)
        
        logger.info(f"üöÄ Iniciando coleta de dados reais do SIAFI...")
        
        # Tentar coletar dados recentes
        arquivo = acquirer.collect_sample_data(
            ano=mes_anterior.year, 
            mes=mes_anterior.month, 
            max_registros=1000
        )
        
        if arquivo:
            logger.info(f"‚úÖ Coleta conclu√≠da! Arquivo: {arquivo.name}")
        else:
            logger.error("‚ùå Falha na coleta de dados")
            
    except Exception as e:
        logger.error(f"‚ùå Erro na execu√ß√£o: {e}")

if __name__ == "__main__":
    main()
