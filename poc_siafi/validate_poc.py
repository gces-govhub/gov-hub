#!/usr/bin/env python3
"""
Validador Completo da PoC SIAFI - Gov-Hub
Script para validar e testar todos os componentes da PoC.
"""

import sys
from pathlib import Path
import logging
import subprocess
import importlib

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class PocValidator:
    """Validador completo da PoC SIAFI."""
    
    def __init__(self):
        self.base_dir = Path(".")
        self.results = []
    
    def validate_dependencies(self):
        """Valida se todas as depend√™ncias est√£o instaladas."""
        logger.info("üîç Validando depend√™ncias...")
        
        required_packages = [
            'pandas', 'numpy', 'requests', 
            'pathlib', 'logging', 'json'
        ]
        
        missing = []
        for package in required_packages:
            try:
                importlib.import_module(package)
                logger.info(f"  ‚úÖ {package}")
            except ImportError:
                missing.append(package)
                logger.error(f"  ‚ùå {package}")
        
        if missing:
            self.results.append(f"‚ùå Depend√™ncias faltando: {', '.join(missing)}")
            return False
        else:
            self.results.append("‚úÖ Todas as depend√™ncias est√£o instaladas")
            return True
    
    def validate_structure(self):
        """Valida a estrutura de diret√≥rios."""
        logger.info("üîç Validando estrutura de diret√≥rios...")
        
        required_dirs = [
            "data",
            "data/poc_siafi",
            "data/poc_siafi/dados_brutos",
            "data/poc_siafi/dados_processados", 
            "data/poc_siafi/relatorios"
        ]
        
        missing_dirs = []
        for dir_path in required_dirs:
            path = Path(dir_path)
            if path.exists():
                logger.info(f"  ‚úÖ {dir_path}")
            else:
                missing_dirs.append(dir_path)
                logger.error(f"  ‚ùå {dir_path}")
        
        if missing_dirs:
            self.results.append(f"‚ùå Diret√≥rios faltando: {', '.join(missing_dirs)}")
            return False
        else:
            self.results.append("‚úÖ Estrutura de diret√≥rios correta")
            return True
    
    def validate_scripts(self):
        """Valida se todos os scripts principais existem."""
        logger.info("üîç Validando scripts...")
        
        required_scripts = [
            "organize_siafi.py",
            "run_siafi_poc.py", 
            "generate_realistic_siafi.py",
            "acquire_real_siafi.py"
        ]
        
        missing_scripts = []
        for script in required_scripts:
            path = Path(script)
            if path.exists():
                logger.info(f"  ‚úÖ {script}")
            else:
                missing_scripts.append(script)
                logger.error(f"  ‚ùå {script}")
        
        if missing_scripts:
            self.results.append(f"‚ùå Scripts faltando: {', '.join(missing_scripts)}")
            return False
        else:
            self.results.append("‚úÖ Todos os scripts est√£o presentes")
            return True
    
    def test_data_generation(self):
        """Testa a gera√ß√£o de dados."""
        logger.info("üîç Testando gera√ß√£o de dados...")
        
        try:
            # Importar e testar gerador
            from generate_realistic_siafi import SiafiDataGenerator
            
            generator = SiafiDataGenerator()
            test_file = generator.generate_realistic_siafi_data(num_records=100)
            
            if test_file.exists():
                logger.info(f"  ‚úÖ Arquivo gerado: {test_file.name}")
                self.results.append("‚úÖ Gera√ß√£o de dados funcionando")
                return True
            else:
                logger.error("  ‚ùå Arquivo n√£o foi criado")
                self.results.append("‚ùå Falha na gera√ß√£o de dados")
                return False
                
        except Exception as e:
            logger.error(f"  ‚ùå Erro na gera√ß√£o: {e}")
            self.results.append(f"‚ùå Erro na gera√ß√£o de dados: {e}")
            return False
    
    def test_organization(self):
        """Testa a organiza√ß√£o de dados."""
        logger.info("üîç Testando organiza√ß√£o de dados...")
        
        try:
            from organize_siafi import organize_existing_siafi_data
            
            organize_existing_siafi_data()
            
            # Verificar se arquivos foram criados
            raw_dir = Path("data/poc_siafi/dados_brutos")
            files = list(raw_dir.glob("*.csv"))
            
            if files:
                logger.info(f"  ‚úÖ {len(files)} arquivos organizados")
                self.results.append("‚úÖ Organiza√ß√£o de dados funcionando")
                return True
            else:
                logger.error("  ‚ùå Nenhum arquivo organizado")
                self.results.append("‚ùå Falha na organiza√ß√£o")
                return False
                
        except Exception as e:
            logger.error(f"  ‚ùå Erro na organiza√ß√£o: {e}")
            self.results.append(f"‚ùå Erro na organiza√ß√£o: {e}")
            return False
    
    def test_poc_execution(self):
        """Testa a execu√ß√£o da PoC."""
        logger.info("üîç Testando execu√ß√£o da PoC...")
        
        try:
            from run_siafi_poc import run_siafi_poc
            
            result = run_siafi_poc()
            
            if result is not False:
                logger.info("  ‚úÖ PoC executada com sucesso")
                self.results.append("‚úÖ Execu√ß√£o da PoC funcionando")
                return True
            else:
                logger.error("  ‚ùå PoC retornou falha")
                self.results.append("‚ùå Falha na execu√ß√£o da PoC")
                return False
                
        except Exception as e:
            logger.error(f"  ‚ùå Erro na PoC: {e}")
            self.results.append(f"‚ùå Erro na execu√ß√£o da PoC: {e}")
            return False
    
    def check_gitignore(self):
        """Verifica se o .gitignore est√° configurado corretamente."""
        logger.info("üîç Verificando .gitignore...")
        
        gitignore_path = Path(".gitignore")
        if not gitignore_path.exists():
            self.results.append("‚ùå Arquivo .gitignore n√£o encontrado")
            return False
        
        content = gitignore_path.read_text(encoding='utf-8')
        
        required_patterns = [
            "data/poc_siafi/dados_brutos/*.csv",
            "data/poc_siafi/dados_brutos/*.json",
            "data/poc_siafi/dados_processados/*.csv",
            "data/poc_siafi/relatorios/*.txt"
        ]
        
        missing_patterns = []
        for pattern in required_patterns:
            if pattern not in content:
                missing_patterns.append(pattern)
        
        if missing_patterns:
            logger.error(f"  ‚ùå Padr√µes faltando no .gitignore: {missing_patterns}")
            self.results.append("‚ùå .gitignore incompleto")
            return False
        else:
            logger.info("  ‚úÖ .gitignore configurado corretamente")
            self.results.append("‚úÖ .gitignore configurado corretamente")
            return True
    
    def generate_validation_report(self):
        """Gera relat√≥rio final de valida√ß√£o."""
        report_path = Path("data/poc_siafi/relatorios/relatorio_validacao_completa.txt")
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write("RELAT√ìRIO DE VALIDA√á√ÉO COMPLETA - POC SIAFI\n")
            f.write("=" * 80 + "\n\n")
            
            f.write(f"Data da Valida√ß√£o: {logging.Formatter().formatTime(logging.LogRecord('', 0, '', 0, '', (), None))}\n\n")
            
            f.write("RESULTADOS DOS TESTES:\n")
            f.write("-" * 40 + "\n")
            
            passed = 0
            total = len(self.results)
            
            for result in self.results:
                f.write(f"{result}\n")
                if result.startswith("‚úÖ"):
                    passed += 1
            
            f.write(f"\nRESUMO FINAL:\n")
            f.write("-" * 40 + "\n")
            f.write(f"‚úÖ Testes Aprovados: {passed}/{total}\n")
            f.write(f"‚ùå Testes Falhados: {total - passed}/{total}\n")
            f.write(f"üìä Taxa de Sucesso: {(passed/total)*100:.1f}%\n\n")
            
            if passed == total:
                f.write("üéâ VALIDA√á√ÉO COMPLETA: TODOS OS TESTES APROVADOS!\n")
                f.write("‚úÖ A PoC SIAFI est√° 100% funcional e pronta para uso.\n")
            else:
                f.write("‚ö†Ô∏è VALIDA√á√ÉO PARCIAL: Alguns testes falharam.\n")
                f.write("üîß Verifique os itens marcados com ‚ùå e corrija antes de prosseguir.\n")
        
        logger.info(f"üìã Relat√≥rio de valida√ß√£o salvo: {report_path.name}")
        return passed == total
    
    def run_complete_validation(self):
        """Executa valida√ß√£o completa."""
        logger.info("üöÄ === INICIANDO VALIDA√á√ÉO COMPLETA DA POC SIAFI ===")
        
        tests = [
            ("Depend√™ncias", self.validate_dependencies),
            ("Estrutura", self.validate_structure),
            ("Scripts", self.validate_scripts),
            ("GitIgnore", self.check_gitignore),
            ("Organiza√ß√£o", self.test_organization),
            ("Gera√ß√£o de Dados", self.test_data_generation),
            ("Execu√ß√£o da PoC", self.test_poc_execution)
        ]
        
        passed_tests = 0
        
        for test_name, test_func in tests:
            logger.info(f"\nüîç === TESTE: {test_name.upper()} ===")
            try:
                if test_func():
                    passed_tests += 1
                    logger.info(f"‚úÖ {test_name}: APROVADO")
                else:
                    logger.error(f"‚ùå {test_name}: FALHADO")
            except Exception as e:
                logger.error(f"‚ùå {test_name}: ERRO - {e}")
                self.results.append(f"‚ùå {test_name}: Erro durante execu√ß√£o - {e}")
        
        # Gerar relat√≥rio final
        all_passed = self.generate_validation_report()
        
        logger.info(f"\nüéØ === VALIDA√á√ÉO CONCLU√çDA ===")
        logger.info(f"üìä Testes Aprovados: {passed_tests}/{len(tests)}")
        
        if all_passed:
            logger.info("üéâ SUCESSO TOTAL: PoC SIAFI 100% VALIDADA!")
            return True
        else:
            logger.error("‚ö†Ô∏è VALIDA√á√ÉO PARCIAL: Alguns componentes precisam de corre√ß√£o.")
            return False

def main():
    """Fun√ß√£o principal."""
    validator = PocValidator()
    success = validator.run_complete_validation()
    
    if success:
        print("\nüéâ PoC SIAFI TOTALMENTE VALIDADA E FUNCIONANDO!")
        print("‚úÖ Todos os componentes est√£o operacionais.")
        print("üöÄ Pronta para demonstra√ß√£o e uso em produ√ß√£o!")
    else:
        print("\n‚ö†Ô∏è PoC SIAFI com alguns problemas detectados.")
        print("üîß Verifique o relat√≥rio de valida√ß√£o para detalhes.")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
