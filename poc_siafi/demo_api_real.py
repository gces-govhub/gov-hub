#!/usr/bin/env python3
"""
Demonstra√ß√£o da PoC SIAFI - Dados Reais
Como configurar e usar a API do Portal da Transpar√™ncia para obter dados reais do SIAFI.
"""

import requests
import json
from pathlib import Path
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def test_api_availability():
    """Testa a disponibilidade da API do Portal da Transpar√™ncia."""
    print("üîç TESTANDO CONECTIVIDADE COM A API DO PORTAL DA TRANSPAR√äNCIA")
    print("=" * 70)
    
    # URLs para testar
    urls_test = [
        "https://api.portaldatransparencia.gov.br/swagger-ui.html",
        "https://api.portaldatransparencia.gov.br/api-de-dados",
    ]
    
    for url in urls_test:
        try:
            response = requests.get(url, timeout=10)
            print(f"‚úÖ {url} - Status: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {url} - Erro: {e}")
    
    print("\nüìã INFORMA√á√ïES SOBRE A API:")
    print("-" * 50)
    print("üåê Portal: https://api.portaldatransparencia.gov.br/")
    print("üìß Cadastro de chave: http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email")
    print("üìö Documenta√ß√£o: https://api.portaldatransparencia.gov.br/swagger-ui.html")

def demonstrate_api_usage():
    """Demonstra como usar a API com chave."""
    print("\nüîß COMO CONFIGURAR A CHAVE DE API:")
    print("=" * 50)
    print("1. Acesse: http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email")
    print("2. Informe seu email")
    print("3. Confirme no email recebido")
    print("4. Guarde sua chave de API")
    print("5. Configure no sistema:")
    print("   ‚Ä¢ Windows: set PORTAL_TRANSPARENCIA_API_KEY=sua_chave")
    print("   ‚Ä¢ Linux/Mac: export PORTAL_TRANSPARENCIA_API_KEY=sua_chave")
    print("   ‚Ä¢ Ou crie arquivo .env: PORTAL_TRANSPARENCIA_API_KEY=sua_chave")
    
    print("\nüìä ENDPOINTS DISPON√çVEIS PARA SIAFI:")
    print("-" * 50)
    
    endpoints = [
        {
            "nome": "Despesas - Execu√ß√£o",
            "endpoint": "/despesas/execucao",
            "descri√ß√£o": "Dados de execu√ß√£o or√ßament√°ria",
            "parametros": "anoExercicio, mesExercicio, pagina, tamanhoPagina"
        },
        {
            "nome": "√ìrg√£os SIAFI",
            "endpoint": "/orgaos-siafi",
            "descri√ß√£o": "Lista de √≥rg√£os do SIAFI",
            "parametros": "pagina, tamanhoPagina"
        },
        {
            "nome": "Cart√µes de Pagamento",
            "endpoint": "/cartoes",
            "descri√ß√£o": "Gastos com cart√£o corporativo",
            "parametros": "mesAnoInicio, mesAnoFim, cpfPortador"
        }
    ]
    
    for i, endpoint in enumerate(endpoints, 1):
        print(f"{i}. {endpoint['nome']}")
        print(f"   üì° Endpoint: {endpoint['endpoint']}")
        print(f"   üìù Descri√ß√£o: {endpoint['descri√ß√£o']}")
        print(f"   ‚öôÔ∏è Par√¢metros: {endpoint['parametros']}")
        print()

def create_api_setup_guide():
    """Cria um guia completo de configura√ß√£o da API."""
    guide_file = Path("data/poc_siafi/relatorios/guia_configuracao_api.txt")
    guide_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(guide_file, 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("GUIA COMPLETO - CONFIGURA√á√ÉO DA API DO PORTAL DA TRANSPAR√äNCIA\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("üéØ OBJETIVO:\n")
        f.write("Configurar acesso √† API oficial do Portal da Transpar√™ncia para\n")
        f.write("coletar dados REAIS do SIAFI (Sistema Integrado de Administra√ß√£o Financeira).\n\n")
        
        f.write("üìã PASSO A PASSO:\n")
        f.write("-" * 50 + "\n")
        f.write("1. SOLICITAR CHAVE DE API:\n")
        f.write("   ‚Ä¢ Acesse: http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email\n")
        f.write("   ‚Ä¢ Informe seu email (pode ser pessoal ou institucional)\n")
        f.write("   ‚Ä¢ Clique em 'Solicitar Chave'\n")
        f.write("   ‚Ä¢ Aguarde o email de confirma√ß√£o\n\n")
        
        f.write("2. CONFIRMAR EMAIL:\n")
        f.write("   ‚Ä¢ Verifique sua caixa de entrada\n")
        f.write("   ‚Ä¢ Clique no link de confirma√ß√£o no email\n")
        f.write("   ‚Ä¢ Sua chave ser√° exibida na tela\n")
        f.write("   ‚Ä¢ IMPORTANTE: Anote sua chave em local seguro\n\n")
        
        f.write("3. CONFIGURAR NO SISTEMA:\n")
        f.write("   Op√ß√£o A - Vari√°vel de Ambiente (Windows):\n")
        f.write("   set PORTAL_TRANSPARENCIA_API_KEY=sua_chave_aqui\n\n")
        
        f.write("   Op√ß√£o B - Arquivo .env (recomendado):\n")
        f.write("   ‚Ä¢ Crie arquivo .env na raiz do projeto\n")
        f.write("   ‚Ä¢ Adicione: PORTAL_TRANSPARENCIA_API_KEY=sua_chave_aqui\n\n")
        
        f.write("   Op√ß√£o C - Vari√°vel de Ambiente (Linux/Mac):\n")
        f.write("   export PORTAL_TRANSPARENCIA_API_KEY=sua_chave_aqui\n\n")
        
        f.write("4. TESTAR CONFIGURA√á√ÉO:\n")
        f.write("   ‚Ä¢ Execute: python collect_real_siafi.py\n")
        f.write("   ‚Ä¢ Deve mostrar: 'üîë Chave de API encontrada'\n")
        f.write("   ‚Ä¢ Se aparecer erro, verifique a configura√ß√£o\n\n")
        
        f.write("üìä DADOS DISPON√çVEIS:\n")
        f.write("-" * 50 + "\n")
        f.write("‚Ä¢ Execu√ß√£o Or√ßament√°ria (despesas)\n")
        f.write("‚Ä¢ √ìrg√£os e Unidades Gestoras\n")
        f.write("‚Ä¢ Cart√µes de Pagamento\n")
        f.write("‚Ä¢ Transfer√™ncias\n")
        f.write("‚Ä¢ Conv√™nios\n")
        f.write("‚Ä¢ Servidores P√∫blicos\n\n")
        
        f.write("‚ö° LIMITA√á√ïES SEM CHAVE:\n")
        f.write("-" * 50 + "\n")
        f.write("‚Ä¢ Acesso negado (erro 401)\n")
        f.write("‚Ä¢ Imposs√≠vel coletar dados reais\n")
        f.write("‚Ä¢ Funciona apenas com dados simulados\n\n")
        
        f.write("‚úÖ VANTAGENS COM CHAVE:\n")
        f.write("-" * 50 + "\n")
        f.write("‚Ä¢ Acesso completo √† API\n")
        f.write("‚Ä¢ Dados oficiais e atualizados\n")
        f.write("‚Ä¢ Rate limits mais generosos\n")
        f.write("‚Ä¢ Suporte t√©cnico oficial\n\n")
        
        f.write("üîó LINKS √öTEIS:\n")
        f.write("-" * 50 + "\n")
        f.write("‚Ä¢ Portal da Transpar√™ncia: https://portaldatransparencia.gov.br/\n")
        f.write("‚Ä¢ API Docs: https://api.portaldatransparencia.gov.br/swagger-ui.html\n")
        f.write("‚Ä¢ Cadastro de Email: http://www.portaldatransparencia.gov.br/api-de-dados/cadastrar-email\n")
        f.write("‚Ä¢ GitHub da API: https://github.com/transparencia-mg/\n\n")
        
        f.write("üìû SUPORTE:\n")
        f.write("-" * 50 + "\n")
        f.write("‚Ä¢ Email: xxxxxxxxxx@cgu.gov.br (verificar site oficial)\n")
        f.write("‚Ä¢ Documenta√ß√£o: Dispon√≠vel no Swagger UI\n")
        f.write("‚Ä¢ Issues: GitHub do projeto\n\n")
        
        f.write("‚ö†Ô∏è IMPORTANTE:\n")
        f.write("-" * 50 + "\n")
        f.write("‚Ä¢ A chave √© GRATUITA\n")
        f.write("‚Ä¢ Use apenas para fins leg√≠timos\n")
        f.write("‚Ä¢ Respeite os rate limits\n")
        f.write("‚Ä¢ N√£o compartilhe sua chave\n")
        f.write("‚Ä¢ Mantenha o .env no .gitignore\n\n")
        
        f.write("üöÄ PR√ìXIMOS PASSOS:\n")
        f.write("-" * 50 + "\n")
        f.write("1. Configure sua chave seguindo este guia\n")
        f.write("2. Execute: python collect_real_siafi.py\n")
        f.write("3. Verifique os dados coletados em data/poc_siafi/\n")
        f.write("4. Analise os relat√≥rios gerados\n")
        f.write("5. Desenvolva suas an√°lises espec√≠ficas\n\n")
        
        f.write("=" * 80 + "\n")
        f.write("GUIA CRIADO PELO GOV-HUB PoC SIAFI\n")
        f.write("Vers√£o: 1.0 | Data: 01/07/2025\n")
        f.write("=" * 80 + "\n")
    
    logger.info(f"üìã Guia de configura√ß√£o criado: {guide_file}")
    return guide_file

def main():
    """Fun√ß√£o principal de demonstra√ß√£o."""
    print("üèõÔ∏è GOV-HUB PoC SIAFI - DEMONSTRA√á√ÉO DA API REAL")
    print("=" * 60)
    
    # Testar conectividade
    test_api_availability()
    
    # Demonstrar uso
    demonstrate_api_usage()
    
    # Criar guia
    guide_file = create_api_setup_guide()
    
    print(f"\nüìã RESUMO:")
    print("=" * 30)
    print("‚úÖ API do Portal da Transpar√™ncia est√° acess√≠vel")
    print("‚ùå Chave de API necess√°ria para coletar dados reais")
    print(f"üìñ Guia completo criado: {guide_file.name}")
    print("\nüéØ PR√ìXIMO PASSO:")
    print("Configure sua chave de API seguindo o guia criado")

if __name__ == "__main__":
    main()
