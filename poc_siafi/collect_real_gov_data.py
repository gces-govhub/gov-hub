#!/usr/bin/env python3
"""
Coletor de Dados Reais - Portal da Transpar√™ncia
Coleta dados reais de cart√µes de pagamento e √≥rg√£os do governo.
"""

import requests
import pandas as pd
from pathlib import Path
from datetime import datetime, timedelta
import logging
import time
import json
import os
from typing import Optional, Dict, List
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

class TransparenciaRealCollector:
    """Coletor de dados reais do Portal da Transpar√™ncia."""
    
    def __init__(self):
        """Inicializa o coletor."""
        self.base_url = "https://api.portaldatransparencia.gov.br/api-de-dados"
        self.base_dir = Path("data/poc_siafi")
        self.raw_dir = self.base_dir / "dados_brutos"
        self.processed_dir = self.base_dir / "dados_processados"
        self.reports_dir = self.base_dir / "relatorios"
        
        # Criar diret√≥rios
        for dir_path in [self.raw_dir, self.processed_dir, self.reports_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # Headers para requisi√ß√µes
        self.headers = {
            'chave-api-dados': os.getenv('PORTAL_TRANSPARENCIA_API_KEY'),
            'Accept': 'application/json'
        }
        
        logger.info("üîë Coletor configurado com chave de API")
    
    def get_orgaos_siafi(self) -> Optional[List[Dict]]:
        """Coleta lista de √≥rg√£os SIAFI."""
        endpoint = f"{self.base_url}/orgaos-siafi"
        
        try:
            logger.info("üìã Coletando √≥rg√£os SIAFI...")
            response = requests.get(endpoint, headers=self.headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ {len(data)} √≥rg√£os coletados")
                return data
            else:
                logger.error(f"‚ùå Erro ao coletar √≥rg√£os: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro na coleta de √≥rg√£os: {e}")
            return None
    
    def get_cartoes_pagamento(self, orgao_codigo: str, mes_ano: str, pagina: int = 1) -> Optional[List[Dict]]:
        """
        Coleta dados de cart√µes de pagamento de um √≥rg√£o espec√≠fico.
        
        Args:
            orgao_codigo: C√≥digo do √≥rg√£o
            mes_ano: Per√≠odo no formato MM/AAAA
            pagina: P√°gina da consulta
        """
        endpoint = f"{self.base_url}/cartoes"
        
        params = {
            'mesAnoInicio': mes_ano,
            'mesAnoFim': mes_ano,
            'codigoOrgao': orgao_codigo,
            'pagina': pagina,
            'tamanhoPagina': 500
        }
        
        try:
            logger.info(f"üí≥ Coletando cart√µes - √ìrg√£o: {orgao_codigo}, Per√≠odo: {mes_ano}, P√°gina: {pagina}")
            response = requests.get(endpoint, headers=self.headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"‚úÖ {len(data)} registros de cart√µes coletados")
                return data
            elif response.status_code == 400:
                logger.warning(f"‚ö†Ô∏è Sem dados para √≥rg√£o {orgao_codigo} no per√≠odo {mes_ano}")
                return []
            else:
                logger.error(f"‚ùå Erro na coleta de cart√µes: {response.status_code}")
                logger.error(f"Response: {response.text[:200]}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå Erro na requisi√ß√£o de cart√µes: {e}")
            return None
    
    def collect_comprehensive_data(self) -> bool:
        """Coleta dados abrangentes do Portal da Transpar√™ncia."""
        logger.info("üèõÔ∏è INICIANDO COLETA COMPLETA DE DADOS REAIS")
        logger.info("üéØ Fonte: Portal da Transpar√™ncia - API Oficial")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # 1. Coletar √≥rg√£os SIAFI
        logger.info("\nüìã FASE 1: Coletando √≥rg√£os SIAFI")
        orgaos = self.get_orgaos_siafi()
        
        if not orgaos:
            logger.error("‚ùå Falha ao coletar √≥rg√£os")
            return False
        
        # Salvar √≥rg√£os
        orgaos_file = self.raw_dir / f"orgaos_siafi_real_{timestamp}.json"
        with open(orgaos_file, 'w', encoding='utf-8') as f:
            json.dump(orgaos, f, indent=2, ensure_ascii=False)
        
        # Converter para CSV
        orgaos_csv = self.raw_dir / f"orgaos_siafi_real_{timestamp}.csv"
        df_orgaos = pd.DataFrame(orgaos)
        df_orgaos.to_csv(orgaos_csv, index=False, encoding='utf-8')
        
        logger.info(f"üíæ √ìrg√£os salvos: {orgaos_csv.name}")
        
        # 2. Coletar dados de cart√µes para √≥rg√£os principais
        logger.info("\nüí≥ FASE 2: Coletando dados de cart√µes de pagamento")
        
        # Filtrar √≥rg√£os v√°lidos (n√£o CODIGO INVALIDO)
        orgaos_validos = [o for o in orgaos if 'CODIGO INVALIDO' not in o.get('descricao', '')]
        logger.info(f"üìä {len(orgaos_validos)} √≥rg√£os v√°lidos encontrados")
        
        all_cartoes = []
        mes_ano = "01/2024"  # Janeiro 2024
        
        for i, orgao in enumerate(orgaos_validos[:5], 1):  # Primeiros 5 √≥rg√£os
            codigo = orgao['codigo']
            nome = orgao['descricao']
            
            logger.info(f"üèõÔ∏è ({i}/5) Processando: {codigo} - {nome}")
            
            # Coletar at√© 3 p√°ginas por √≥rg√£o
            orgao_cartoes = []
            for pagina in range(1, 4):
                cartoes = self.get_cartoes_pagamento(codigo, mes_ano, pagina)
                
                if cartoes is None:
                    break
                elif len(cartoes) == 0:
                    break
                else:
                    # Adicionar info do √≥rg√£o aos registros
                    for cartao in cartoes:
                        cartao['orgao_codigo'] = codigo
                        cartao['orgao_nome'] = nome
                    
                    orgao_cartoes.extend(cartoes)
                    
                    if len(cartoes) < 500:  # √öltima p√°gina
                        break
                
                time.sleep(1)  # Rate limiting
            
            if orgao_cartoes:
                logger.info(f"‚úÖ {len(orgao_cartoes)} registros coletados para {nome}")
                all_cartoes.extend(orgao_cartoes)
            else:
                logger.info(f"üìÑ Sem dados de cart√µes para {nome}")
            
            time.sleep(2)  # Rate limiting entre √≥rg√£os
        
        # 3. Salvar dados de cart√µes
        if all_cartoes:
            # JSON
            cartoes_json = self.raw_dir / f"cartoes_pagamento_real_{timestamp}.json"
            with open(cartoes_json, 'w', encoding='utf-8') as f:
                json.dump(all_cartoes, f, indent=2, ensure_ascii=False)
            
            # CSV
            cartoes_csv = self.raw_dir / f"cartoes_pagamento_real_{timestamp}.csv"
            df_cartoes = pd.DataFrame(all_cartoes)
            df_cartoes.to_csv(cartoes_csv, index=False, encoding='utf-8')
            
            logger.info(f"üíæ Cart√µes salvos: {cartoes_csv.name}")
            logger.info(f"üìä Total de registros de cart√µes: {len(all_cartoes):,}")
            
            # 4. Gerar relat√≥rios
            self.generate_comprehensive_report(orgaos_csv, cartoes_csv, orgaos, all_cartoes)
            
            return True
        else:
            logger.warning("‚ö†Ô∏è Nenhum dado de cart√£o foi coletado")
            return False
    
    def generate_comprehensive_report(self, orgaos_file: Path, cartoes_file: Path, 
                                    orgaos: List[Dict], cartoes: List[Dict]):
        """Gera relat√≥rio abrangente da coleta."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = self.reports_dir / f"relatorio_coleta_completa_{timestamp}.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("=" * 80 + "\n")
            f.write("RELAT√ìRIO COMPLETO - DADOS REAIS DO PORTAL DA TRANSPAR√äNCIA\n")
            f.write("=" * 80 + "\n\n")
            
            f.write(f"üïí Data da Coleta: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
            f.write(f"üåê Fonte: Portal da Transpar√™ncia - API Oficial\n")
            f.write(f"üîë Status da API: Autenticada e funcional\n")
            f.write(f"üìÖ Per√≠odo dos Dados: Janeiro/2024\n\n")
            
            f.write("üìä DADOS COLETADOS:\n")
            f.write("-" * 50 + "\n")
            f.write(f"üèõÔ∏è √ìrg√£os SIAFI: {len(orgaos)} registros\n")
            f.write(f"üí≥ Cart√µes de Pagamento: {len(cartoes):,} registros\n")
            f.write(f"üìÅ Arquivo √ìrg√£os: {orgaos_file.name}\n")
            f.write(f"üìÅ Arquivo Cart√µes: {cartoes_file.name}\n\n")
            
            if orgaos:
                f.write("üèõÔ∏è √ìRG√ÉOS V√ÅLIDOS PROCESSADOS:\n")
                f.write("-" * 50 + "\n")
                orgaos_validos = [o for o in orgaos if 'CODIGO INVALIDO' not in o.get('descricao', '')]
                for i, orgao in enumerate(orgaos_validos[:10], 1):
                    f.write(f"{i:2d}. {orgao['codigo']} - {orgao['descricao']}\n")
                
                if len(orgaos_validos) > 10:
                    f.write(f"... e mais {len(orgaos_validos)-10} √≥rg√£os\n")
            
            if cartoes:
                df_cartoes = pd.DataFrame(cartoes)
                
                f.write(f"\nüí≥ AN√ÅLISE DOS CART√ïES DE PAGAMENTO:\n")
                f.write("-" * 50 + "\n")
                f.write(f"üìã Total de registros: {len(cartoes):,}\n")
                f.write(f"üóÇÔ∏è Colunas dispon√≠veis: {len(df_cartoes.columns)}\n")
                
                # An√°lise de valores
                valor_cols = [col for col in df_cartoes.columns if 'valor' in col.lower()]
                if valor_cols:
                    col_valor = valor_cols[0]
                    try:
                        valores = pd.to_numeric(df_cartoes[col_valor], errors='coerce')
                        f.write(f"\nüí∞ AN√ÅLISE FINANCEIRA:\n")
                        f.write(f"üíµ Valor total: R$ {valores.sum():,.2f}\n")
                        f.write(f"üìä Valor m√©dio: R$ {valores.mean():,.2f}\n")
                        f.write(f"üìà Valor m√°ximo: R$ {valores.max():,.2f}\n")
                        f.write(f"üìâ Valor m√≠nimo: R$ {valores.min():,.2f}\n")
                    except:
                        f.write(f"üí∞ Coluna de valor: {col_valor} (an√°lise n√£o dispon√≠vel)\n")
                
                # √ìrg√£os com mais gastos
                if 'orgao_nome' in df_cartoes.columns and valor_cols:
                    try:
                        gastos_por_orgao = df_cartoes.groupby('orgao_nome')[valor_cols[0]].sum().sort_values(ascending=False)
                        f.write(f"\nüèÜ TOP 5 √ìRG√ÉOS POR GASTOS:\n")
                        for i, (orgao, valor) in enumerate(gastos_por_orgao.head().items(), 1):
                            f.write(f"{i}. {orgao}: R$ {valor:,.2f}\n")
                    except:
                        pass
                
                f.write(f"\nüìã ESTRUTURA DOS DADOS:\n")
                f.write("-" * 50 + "\n")
                for i, col in enumerate(df_cartoes.columns, 1):
                    f.write(f"{i:2d}. {col}\n")
                
                f.write(f"\nüìÑ AMOSTRA DOS DADOS (primeiros 3 registros):\n")
                f.write("-" * 50 + "\n")
                for i, (_, row) in enumerate(df_cartoes.head(3).iterrows()):
                    f.write(f"\nüîπ Registro {i+1}:\n")
                    for col, val in row.items():
                        f.write(f"   {col}: {val}\n")
            
            f.write(f"\n‚úÖ COLETA COMPLETA REALIZADA COM SUCESSO!\n")
            f.write(f"üéØ Dados reais e oficiais do governo federal coletados.\n")
            f.write(f"üì° API do Portal da Transpar√™ncia totalmente funcional.\n")
            f.write(f"üöÄ Sistema pronto para an√°lises avan√ßadas.\n")
        
        logger.info(f"üìã Relat√≥rio completo salvo: {report_file.name}")

def main():
    """Fun√ß√£o principal."""
    print("üèõÔ∏è Gov-Hub - Coletor de Dados Reais do Portal da Transpar√™ncia")
    print("=" * 70)
    
    collector = TransparenciaRealCollector()
    
    try:
        success = collector.collect_comprehensive_data()
        
        if success:
            print(f"\nüéâ COLETA COMPLETA REALIZADA COM SUCESSO!")
            print(f"üìÅ Dados salvos em: data/poc_siafi/dados_brutos/")
            print(f"üìã Relat√≥rios em: data/poc_siafi/relatorios/")
            print(f"‚úÖ Dados reais do governo federal coletados e organizados!")
        else:
            print(f"\n‚ùå FALHA NA COLETA")
            print(f"üîß Verifique os logs para mais detalhes")
            
    except Exception as e:
        logger.error(f"‚ùå Erro na execu√ß√£o: {e}")
        print(f"\n‚ùå Erro: {e}")

if __name__ == "__main__":
    main()
